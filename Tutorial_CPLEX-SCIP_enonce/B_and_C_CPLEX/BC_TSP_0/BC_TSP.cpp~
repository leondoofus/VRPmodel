#include <ilcplex/ilocplex.h>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>

#include"../../Graph/Graph.h"

#define epsilon 0.00001

using namespace std;

//#define OUTPUT

///////////////////////////////
///////////////////////////////

// The "famous" formulation for the TSP
// Given a complete undirected graph G=(V,E)

// Min sum_{i=1 to n} sum{j=1 to n, i!=j}  c_ij x_ij
//   sum_{j=1 to n, j!=i} x_ij = 2   for all node i=1 to n
//   sum_{i in W} sum_{j not in W} x_ij>=2 for every subset of node W  (W!= 0 and W!= V)
//   x_ij in {0,1} for every arc (i,j) i=1 to n, j=1 to n i!=j

///////////////////////////////
///////////////////////////////


#define MAX_ITER 0

void TwoOptDescent(C_Graph &G, double& curr_length, vector<int>& curr_sol, double& best_length, vector<pair<int,int> > &tour){
  
  int k;
  int nbiter;
  int k1,k2;
  int jm,j,jp,lm,l,lp;
  bool found;
  double v1,v2;
  
  for (nbiter=0;nbiter<MAX_ITER;nbiter++){

    k1=rand()%G.nb_nodes;
    k2=rand()%(G.nb_nodes-1)+1;
    k2=(k1+k2)%G.nb_nodes;

    if (k1==0) jm=curr_sol[G.nb_nodes-1];
       else jm=curr_sol[(k1-1)%G.nb_nodes];
    j=curr_sol[k1];
    jp=curr_sol[(k1+1)%G.nb_nodes];
    if (k2==0) lm=curr_sol[G.nb_nodes-1];
       else lm=curr_sol[(k2-1)%G.nb_nodes];
    l=curr_sol[k2];
    lp=curr_sol[(k2+1)%G.nb_nodes];
    
    if (k2==(k1+1)%G.nb_nodes){
      v1=G.lengthTSP(jm,j) + G.lengthTSP(l,lp);
      v2=G.lengthTSP(jm,l) + G.lengthTSP(j,lp);
    }
    else
      if (k1==(k2+1)%G.nb_nodes){
	v1=G.lengthTSP(lm,l) + G.lengthTSP(j,jp);
	v2=G.lengthTSP(lm,j) + G.lengthTSP(l,jp);
      }
      else{
	v1=G.lengthTSP(jm,j) + G.lengthTSP(j,jp) + G.lengthTSP(lm,l) + G.lengthTSP(l,lp) ;
	v2=G.lengthTSP(jm,l) + G.lengthTSP(l,jp) + G.lengthTSP(lm,j) + G.lengthTSP(j,lp);
      }

    if (v1>v2){
      curr_length=curr_length-v1+v2;
      curr_sol[k1]=l;
      curr_sol[k2]=j;	    
    }
    else{
      if (rand()%1000<1){
    	curr_length=curr_length-v1+v2;
  	curr_sol[k1]=l;
  	curr_sol[k2]=j;	    
      }      
    }

    double test=0;
    for(k=1; k<G.nb_nodes;k++)
      test+=G.lengthTSP(curr_sol[k-1],curr_sol[k]);
    test+=G.lengthTSP(curr_sol[G.nb_nodes-1],curr_sol[0]);
    
    if (best_length>curr_length){
      tour[curr_sol[0]].first=curr_sol[G.nb_nodes-1];
      tour[curr_sol[0]].second=curr_sol[1];
      for(k=1; k<G.nb_nodes-1;k++) {
	tour[curr_sol[k]].first=curr_sol[k-1];
	tour[curr_sol[k]].second=curr_sol[k+1];	
      }
      tour[curr_sol[G.nb_nodes-1]].first=curr_sol[G.nb_nodes-2];
      tour[curr_sol[G.nb_nodes-1]].second=curr_sol[0];
      best_length=curr_length;    
    }
    #ifdef OUTPUT
    cout<<"Curr sol: "<<curr_length<<" /" <<best_length<<endl;
    #endif
  }

}

///////////////////////////////
////// SEPARATION FCT ////////
/////////////////////////////

// declaration of the functions that are dispatched outstide this file
bool find_ViolatedMengerCutCst(IloEnv env, C_Graph & G,  vector<vector<IloNumVar*> >& x, IloRange & ViolatedCst);

// Cplex callback that needs to be in the same file as the main one

// Necessary inequalities
ILOLAZYCONSTRAINTCALLBACK2(LazyMengerCutSeparation,
			   C_Graph &, G,			 
			   vector<vector<IloNumVar*> >&,x
		    ){
  #ifdef OUTPUT
  cout<<"*********** Lazy separation Callback *************"<<endl;
  #endif

  int i;
  list<C_link *>::const_iterator it;
  IloRange ViolatedCst;
  
  // Put the linear relaxation values on the edges of graph G

  for (i=0;i<G.nb_nodes;i++)
    for (it=G.V_nodes[i].L_adjLinks.begin();it!=G.V_nodes[i].L_adjLinks.end();it++){
      if (i<(*it)->return_other_extrem(i)){
	(*it)->algo_cost= getValue(*(x[i][(*it)->return_other_extrem(i)]));
	if((*it)->algo_cost<epsilon)(*it)->algo_cost=0 ;
      }
    }

  /* Separation of Cut inequalities */

  if (find_ViolatedMengerCutCst(getEnv(),G,x, ViolatedCst)){
    #ifdef OUTPUT
    cout << "Adding constraint : "<<endl;
    cout<< ViolatedCst << endl;
    #endif
    add(ViolatedCst,IloCplex::UseCutPurge);   // UseCutForce UseCutPurge UseCutFilter
  }
  #ifdef OUTPUT
    else {
      cout<<"No Cst found"<<endl;
    }
  #endif 

}


// Usefull inequalities (here are the same as the necessary ones)
ILOUSERCUTCALLBACK2(UsercutMengerCutSeparation,
			   C_Graph &, G,
			   vector<vector<IloNumVar*> >&,x
		    ){
  #ifdef OUTPUT
  cout<<"********* UserCut separation Callback *************"<<endl;
  #endif

  int i;
  list<C_link *>::const_iterator it;
  IloRange ViolatedCst;
  
  // Put the linear relaxation values on the edges of graph G

  for (i=0;i<G.nb_nodes;i++)
    for (it=G.V_nodes[i].L_adjLinks.begin();it!=G.V_nodes[i].L_adjLinks.end();it++){
      if (i<(*it)->return_other_extrem(i)){
	(*it)->algo_cost= getValue(*(x[i][(*it)->return_other_extrem(i)]));
	if((*it)->algo_cost<epsilon)(*it)->algo_cost=0 ;
      }
    }

  /* Separation of Cut inequalities */

  if (find_ViolatedMengerCutCst(getEnv(),G,x, ViolatedCst)){

    #ifdef OUTPUT
    cout << "Adding constraint : "<<endl;
    cout<< ViolatedCst << endl;
    #endif
    add(ViolatedCst,IloCplex::UseCutPurge);   // UseCutForce UseCutPurge UseCutFilter
  }
  #ifdef OUTPUT
    else {
      cout<<"No Cst found"<<endl;
    }
  #endif
}

//////////////////////////////////////
/////  CHECK SOLUTION FEASABILITY ////
//////////////////////////////////////

// Check if an integer solution (can be obtained by Cplex by heuristic
// or within a B&B node
ILOINCUMBENTCALLBACK2(CheckSolFeas,
		      C_Graph &, G,
		      vector<vector<IloNumVar*> >&,x
		      ){

  
  #ifdef OUTPUT
  cout << "******* Check Feasability ********" << endl;  
  #endif

  list<pair<int,int> > L;
  L.clear();
   
  int cpt=0;
  int i=0,j,oldi=-1;
  bool fd;
  do{
    j=0;
    fd=false;
    while (!fd){    
      if ((j!=i) && (j!=oldi) && (getValue(*x[i][j])>1-epsilon))
	fd=true;
      else
	j++;
    }
    oldi=i;
    i=j;
    L.push_back(make_pair(oldi,j));
    cpt++;
  }while (i!=0);

  if (cpt!=G.nb_nodes){  
    reject();
    #ifdef OUTPUT
    cout<<"Solution Reject"<<endl;
    #endif
    // //ofstream ficsol("att48.tour");
    // list<pair<int,int> >::const_iterator it;
    // double value=0;
    // for (it=L.begin();it!=L.end();it++){
    //   value+=G.lengthTSP(it->first,it->second);
    //   cout<<"("<<it->first<<","<<it->second<<") ";
    //   //  ficsol<<it->first<<" "<<it->second<<endl;
    // }
    // cout<<" value="<<value<<endl;
    //ficsol.close();
  }
  #ifdef OUTPUT
  else {
    cout<<"Solution accepted"<<endl;
    // ofstream ficsol("att48.tour");
     list<pair<int,int> >::const_iterator it;
     double value=0;
     for (it=L.begin();it!=L.end();it++){
       value+=G.lengthTSP(it->first,it->second);
       cout<<"("<<it->first<<","<<it->second<<") ";
       //     ficsol<<it->first<<" "<<it->second<<endl;
     }
    //ficsol.close();
  }
  #endif
 

}



//////////////////////////////////////
/////   PRIMAL HEURISTIC          ////
//////////////////////////////////////

class sortingEdge{
public:
  int v1,v2;
  double val;

  bool operator<(sortingEdge& e){
    return (val>e.val);
  }
};


// Try to produce a heuristic solution from fractional solution
ILOHEURISTICCALLBACK2(PrimalHeuristic,
		      C_Graph &, G,
		      vector<vector<IloNumVar*> >&,x
		      ){

  
  #ifdef OUTPUT
  cout << "******* Primal Heuristic ********" << endl;  
  #endif
  
  int i,j,oldi;
  list<sortingEdge> L;
  double value;
  
  for (i=0;i<G.nb_nodes;i++)
    for (j=i+1;j<G.nb_nodes;j++){
      sortingEdge e;
      e.v1=i;
      e.v2=j;
      e.val=getValue(*x[i][j]);
      L.push_back(e);
    }
  L.sort();

  vector<int> CC;
  CC.resize(G.nb_nodes);
  for (i=0;i<G.nb_nodes;i++) CC[i]=-1;

  vector<pair<int,int> > tour;
  tour.resize(G.nb_nodes);
  for (i=0;i<G.nb_nodes;i++){
    tour[i].first=-1;
    tour[i].second=-1;
  }
  
  int cpt=0;
  sortingEdge e;
  while ( (cpt!=G.nb_nodes-1) && (!L.empty()) ){

    e=L.front();
    L.pop_front();

    if (  ( (CC[e.v1]==-1) || (CC[e.v2]==-1) || (CC[e.v1]!=CC[e.v2]) )
	  && (tour[e.v1].second==-1) && (tour[e.v2].second==-1) ) {
      cpt++;

      if (tour[e.v1].first==-1){
	tour[e.v1].first=e.v2;
	CC[e.v1]=e.v1;
      }
      else{
	tour[e.v1].second=e.v2;
      }

      if (tour[e.v2].first==-1){
	tour[e.v2].first=e.v1;
	CC[e.v2]=CC[e.v1];
      }
      else{	
	tour[e.v2].second=e.v1;
	oldi=e.v1;
	i=e.v2;
	while (tour[i].second!=-1){

	  if (tour[i].second==oldi) j=tour[i].first;
    	                       else j=tour[i].second;
	  CC[j]=CC[e.v1];
	  oldi=i;
	  i=j;
	}
		
      }
    }
  }

 
  IloIntVarArray solx(getEnv(),(G.nb_nodes*(G.nb_nodes-1))/2,0.0,1.0);
  IloNumArray valx(getEnv(),(G.nb_nodes*(G.nb_nodes-1))/2);

  int i1=-1,i2;
  for (i=0;i<G.nb_nodes;i++)
    if (tour[i].second==-1)
       if (i1==-1) i1=i;
              else i2=i;

  tour[i1].second=i2;
  tour[i2].second=i1;

  // value=0;
  // vector<int> nodetour;
  // nodetour.resize(G.nb_nodes);
  // i=0;
  // int k=0;
  // oldi=-1;
  // do{
  //   nodetour[k]=i;
  //   if (tour[i].first!=oldi) {
  //     oldi=i;
  //     i=tour[i].first;
  //   }
  //   else{
  //     oldi=i;
  //     i=tour[i].second;
  //   }
  //   value+=G.lengthTSP(oldi,i);
  //   k++;
  // }while(i!=0);

  // double best_length=value;
  // TwoOptDescent(G, value, nodetour, best_length, tour);

  
  value=0;
  cpt=0;
  int cc=0;
  for (i=0;i<G.nb_nodes;i++){

    for (j=i+1;j<G.nb_nodes;j++){
      solx[cpt]=*x[i][j];
      if ((j!=tour[i].first)&&(j!=tour[i].second))
	valx[cpt]=0;      
      else {
	valx[cpt]=1;
	//cout<<"("<<i<<","<<j<<") ";
	value+=G.lengthTSP(i,j);
	cc++;
      }
      cpt++;
    }

    
  }
  

  //cout<<"Heuristic solution found: "<<value<<endl;
  setSolution(solx,valx,value);

  if (value<getIncumbentObjValue()){
    ofstream ficsol("att48.tour");
    for (i=0;i<G.nb_nodes;i++){
      if (i<tour[i].first)
	ficsol<<i<<" "<<tour[i].first<<endl;
      if (i<tour[i].second)
	ficsol<<i<<" "<<tour[i].second<<endl;
    }  
    ficsol.close();
  }



}



//////////////////////////////////////
/////      MAIN                   ////
//////////////////////////////////////

int main (int argc, char**argv){

  char * name,*nameext, *nameextsol;
  int i,j,k;

  vector<int> sol;


  //////////////
  //////  DATA
  //////////////

  if(argc!=2){
    cerr<<"usage: "<<argv[0]<<" <TSP file name>   (without .tsp)"<<endl; 
    return 1;
  }

  name= new char[40];
  nameext= new char[40];
  nameextsol= new char[40];

  name=strcat(name,argv[1]);
  nameext=strcat(nameext,argv[1]);
  nameext=strcat(nameext,".tsp");

  ifstream fic(nameext);

  if (fic==NULL){
    cerr<<"file "<<nameext<<" not found"<<endl;
    return 1;
  }

  C_Graph G;

  G.read_undirected_complete_TSP(fic);

  fic.close();


  //////////////
  //////  CPLEX INITIALIZATION
  //////////////


  IloEnv   env;
  IloModel model(env);



  ////////////////////////
  //////  VAR
  ////////////////////////


  vector<vector<IloNumVar*> > x;
  x.resize(G.nb_nodes);
  
  for (i=0;i<G.nb_nodes;i++)
    x[i].resize(G.nb_nodes);
  
  for (i=0;i<G.nb_nodes;i++){
    for (j=i+1;j<G.nb_nodes;j++) {
	x[i][j]=new IloNumVar(env, 0.0, 1.0, ILOINT);
	ostringstream varname;
	varname.str("");
	varname<<"x_"<<i<<"_"<<j;
	x[i][j]->setName(varname.str().c_str());
	x[j][i]=x[i][j];
    }
  }
  


  //////////////
  //////  CST
  //////////////

  IloRangeArray CC(env);
  int nbcst=0;
   
  //   sum_{j=1 to n, j!=i} x_ij = 2  for all node i=1 to n
  for (i=0;i<G.nb_nodes;i++){
    IloExpr c1(env);
    for (j=0;j<G.nb_nodes;j++)
      if (i!=j)
	c1+=(*x[i][j]);
    CC.add(c1==2);
    ostringstream nomcst;
    nomcst.str("");
    nomcst<<"CstDeg_"<<i;
    CC[nbcst].setName(nomcst.str().c_str());
    nbcst++;
  }

  IloExpr c2(env);
  for (i=0;i<G.nb_nodes;i++)
    for (j=i+1;j<G.nb_nodes;j++) 
      c2+=(*x[i][j]);
  CC.add(c2==G.nb_nodes);
  ostringstream nomcst;
  nomcst.str("");
  nomcst<<"CstNm1";
  CC[nbcst].setName(nomcst.str().c_str());
  nbcst++;


  model.add(CC);

   // And Finally
  IloCplex cplex(model);

  
  /// ADD SEPARATION CALLBACK
  cplex.use(LazyMengerCutSeparation(env,G,x));
  //cplex.use(UsercutMengerCutSeparation(env,G,x));





  //////////////
  ////// OBJ
  //////////////
  
  IloObjective obj=IloAdd(model, IloMinimize(env, 0.0));
  
  for (i=0;i<G.nb_nodes;i++)
    for (j=i+1;j<G.nb_nodes;j++)
	obj.setLinearCoef((*x[i][j]),G.lengthTSP(i,j));
 

  ///////////
  //// RESOLUTION
  //////////

  // ADD CHECK SOLUTION FEASABILITY

  cplex.use(CheckSolFeas(env,G,x));

  //cplex.use(PrimalHeuristic(env,G,x));
  
  // cplex.setParam(IloCplex::Cliques,-1);
  // cplex.setParam(IloCplex::Covers,-1);
  // cplex.setParam(IloCplex::DisjCuts,-1);
  // cplex.setParam(IloCplex::FlowCovers,-1);
  // cplex.setParam(IloCplex::FlowPaths,-1);
  // cplex.setParam(IloCplex::FracCuts,-1);
  // cplex.setParam(IloCplex::GUBCovers,-1);
  // cplex.setParam(IloCplex::ImplBd,-1);
  // cplex.setParam(IloCplex::MIRCuts,-1);
  // cplex.setParam(IloCplex::ZeroHalfCuts,-1);
  // cplex.setParam(IloCplex::MCFCuts,-1);
  // cplex.setParam(IloCplex::MIPInterval,1);
  // cplex.setParam(IloCplex::HeurFreq,-1);
  // cplex.setParam(IloCplex::ClockType,1);
  // cplex.setParam(IloCplex::RINSHeur,-1);


  #ifdef OUTPUT
  cout<<"Wrote LP on file"<<endl;
  cplex.exportModel("sortie.lp");
  #endif

  if ( !cplex.solve() ) {
    env.error() << "Failed to optimize LP" << endl;
    exit(1);
  }

 
  env.out() << "Solution status = " << cplex.getStatus() << endl;
  env.out() << "Solution value  = " << cplex.getObjValue() << endl;


  list<pair<int,int> >   Lsol;
  for(i = 0; i < G.nb_nodes; i++)
     for (j=i+1;j<G.nb_nodes;j++)
	if (cplex.getValue(*x[i][j])>1-epsilon)
	  Lsol.push_back(make_pair(i,j));
  

  //////////////
  //////  CPLEX's ENDING
  //////////////

  env.end();

  //////////////
  //////  OUTPUT
  //////////////

  nameextsol=strcat(nameextsol,argv[1]);
  nameextsol=strcat(nameextsol,".tour");

  list<pair<int,int> >::const_iterator itp;
 
  ofstream ficsol(nameextsol);
  double best_length=0;
  for(itp = Lsol.begin(); itp!=Lsol.end();itp++) {
    best_length+=G.lengthTSP(itp->first,itp->second);
    ficsol<<itp->first<<" "<<itp->second<<endl;
  }
 
  ficsol.close();

  cout<<"Tour found of value : "<<best_length<<endl;



  return 0;
}
